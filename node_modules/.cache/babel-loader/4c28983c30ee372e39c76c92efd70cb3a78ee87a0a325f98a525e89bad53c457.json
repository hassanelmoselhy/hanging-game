{"ast":null,"code":"// src/redux/reducers.js\nimport { GUESS_LETTER, RESET_GAME, SET_NEXT_WORD, FETCH_WORDS_REQUEST, FETCH_WORDS_SUCCESS, FETCH_WORDS_FAILURE } from './actions';\nconst initialState = {\n  word: '',\n  guessedLetters: [],\n  incorrectGuesses: 0,\n  maxGuesses: 6,\n  words: [],\n  currentWordIndex: 0,\n  loading: false,\n  error: null\n};\nconst hangmanReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_WORDS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case FETCH_WORDS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        words: action.payload,\n        word: action.payload[0]\n      };\n    case FETCH_WORDS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case GUESS_LETTER:\n      const letter = action.payload;\n      const isCorrect = state.word.includes(letter);\n      const guessedLetters = [...state.guessedLetters, letter];\n      const incorrectGuesses = isCorrect ? state.incorrectGuesses : state.incorrectGuesses + 1;\n      const isWordComplete = state.word.split('').every(l => guessedLetters.includes(l));\n      return {\n        ...state,\n        guessedLetters,\n        incorrectGuesses,\n        ...(isWordComplete && {\n          word: state.words[(state.currentWordIndex + 1) % state.words.length],\n          guessedLetters: [],\n          incorrectGuesses: 0,\n          currentWordIndex: (state.currentWordIndex + 1) % state.words.length\n        })\n      };\n    case SET_NEXT_WORD:\n      return {\n        ...state,\n        word: state.words[(state.currentWordIndex + 1) % state.words.length],\n        guessedLetters: [],\n        incorrectGuesses: 0,\n        currentWordIndex: (state.currentWordIndex + 1) % state.words.length\n      };\n    case RESET_GAME:\n      return initialState;\n    default:\n      return state;\n  }\n};\nexport default hangmanReducer;","map":{"version":3,"names":["GUESS_LETTER","RESET_GAME","SET_NEXT_WORD","FETCH_WORDS_REQUEST","FETCH_WORDS_SUCCESS","FETCH_WORDS_FAILURE","initialState","word","guessedLetters","incorrectGuesses","maxGuesses","words","currentWordIndex","loading","error","hangmanReducer","state","action","type","payload","letter","isCorrect","includes","isWordComplete","split","every","l","length"],"sources":["C:/Users/hassa/Desktop/react/hangman-game/src/redux/reducers.js"],"sourcesContent":["// src/redux/reducers.js\r\nimport {\r\n    GUESS_LETTER,\r\n    RESET_GAME,\r\n    SET_NEXT_WORD,\r\n    FETCH_WORDS_REQUEST,\r\n    FETCH_WORDS_SUCCESS,\r\n    FETCH_WORDS_FAILURE,\r\n  } from './actions';\r\n  \r\n  const initialState = {\r\n    word: '',\r\n    guessedLetters: [],\r\n    incorrectGuesses: 0,\r\n    maxGuesses: 6,\r\n    words: [],\r\n    currentWordIndex: 0,\r\n    loading: false,\r\n    error: null,\r\n  };\r\n  \r\n  const hangmanReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case FETCH_WORDS_REQUEST:\r\n        return { ...state, loading: true, error: null };\r\n      case FETCH_WORDS_SUCCESS:\r\n        return { ...state, loading: false, words: action.payload, word: action.payload[0] };\r\n      case FETCH_WORDS_FAILURE:\r\n        return { ...state, loading: false, error: action.payload };\r\n      case GUESS_LETTER:\r\n        const letter = action.payload;\r\n        const isCorrect = state.word.includes(letter);\r\n        const guessedLetters = [...state.guessedLetters, letter];\r\n        const incorrectGuesses = isCorrect\r\n          ? state.incorrectGuesses\r\n          : state.incorrectGuesses + 1;\r\n        const isWordComplete = state.word.split('').every(l => guessedLetters.includes(l));\r\n        return {\r\n          ...state,\r\n          guessedLetters,\r\n          incorrectGuesses,\r\n          ...(isWordComplete && {\r\n            word: state.words[(state.currentWordIndex + 1) % state.words.length],\r\n            guessedLetters: [],\r\n            incorrectGuesses: 0,\r\n            currentWordIndex: (state.currentWordIndex + 1) % state.words.length,\r\n          }),\r\n        };\r\n      case SET_NEXT_WORD:\r\n        return {\r\n          ...state,\r\n          word: state.words[(state.currentWordIndex + 1) % state.words.length],\r\n          guessedLetters: [],\r\n          incorrectGuesses: 0,\r\n          currentWordIndex: (state.currentWordIndex + 1) % state.words.length,\r\n        };\r\n      case RESET_GAME:\r\n        return initialState;\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default hangmanReducer;\r\n  "],"mappings":"AAAA;AACA,SACIA,YAAY,EACZC,UAAU,EACVC,aAAa,EACbC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,QACd,WAAW;AAElB,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,EAAE;EACRC,cAAc,EAAE,EAAE;EAClBC,gBAAgB,EAAE,CAAC;EACnBC,UAAU,EAAE,CAAC;EACbC,KAAK,EAAE,EAAE;EACTC,gBAAgB,EAAE,CAAC;EACnBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAGV,YAAY,EAAEW,MAAM,KAAK;EACvD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKf,mBAAmB;MACtB,OAAO;QAAE,GAAGa,KAAK;QAAEH,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC;IACjD,KAAKV,mBAAmB;MACtB,OAAO;QAAE,GAAGY,KAAK;QAAEH,OAAO,EAAE,KAAK;QAAEF,KAAK,EAAEM,MAAM,CAACE,OAAO;QAAEZ,IAAI,EAAEU,MAAM,CAACE,OAAO,CAAC,CAAC;MAAE,CAAC;IACrF,KAAKd,mBAAmB;MACtB,OAAO;QAAE,GAAGW,KAAK;QAAEH,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAEG,MAAM,CAACE;MAAQ,CAAC;IAC5D,KAAKnB,YAAY;MACf,MAAMoB,MAAM,GAAGH,MAAM,CAACE,OAAO;MAC7B,MAAME,SAAS,GAAGL,KAAK,CAACT,IAAI,CAACe,QAAQ,CAACF,MAAM,CAAC;MAC7C,MAAMZ,cAAc,GAAG,CAAC,GAAGQ,KAAK,CAACR,cAAc,EAAEY,MAAM,CAAC;MACxD,MAAMX,gBAAgB,GAAGY,SAAS,GAC9BL,KAAK,CAACP,gBAAgB,GACtBO,KAAK,CAACP,gBAAgB,GAAG,CAAC;MAC9B,MAAMc,cAAc,GAAGP,KAAK,CAACT,IAAI,CAACiB,KAAK,CAAC,EAAE,CAAC,CAACC,KAAK,CAACC,CAAC,IAAIlB,cAAc,CAACc,QAAQ,CAACI,CAAC,CAAC,CAAC;MAClF,OAAO;QACL,GAAGV,KAAK;QACRR,cAAc;QACdC,gBAAgB;QAChB,IAAIc,cAAc,IAAI;UACpBhB,IAAI,EAAES,KAAK,CAACL,KAAK,CAAC,CAACK,KAAK,CAACJ,gBAAgB,GAAG,CAAC,IAAII,KAAK,CAACL,KAAK,CAACgB,MAAM,CAAC;UACpEnB,cAAc,EAAE,EAAE;UAClBC,gBAAgB,EAAE,CAAC;UACnBG,gBAAgB,EAAE,CAACI,KAAK,CAACJ,gBAAgB,GAAG,CAAC,IAAII,KAAK,CAACL,KAAK,CAACgB;QAC/D,CAAC;MACH,CAAC;IACH,KAAKzB,aAAa;MAChB,OAAO;QACL,GAAGc,KAAK;QACRT,IAAI,EAAES,KAAK,CAACL,KAAK,CAAC,CAACK,KAAK,CAACJ,gBAAgB,GAAG,CAAC,IAAII,KAAK,CAACL,KAAK,CAACgB,MAAM,CAAC;QACpEnB,cAAc,EAAE,EAAE;QAClBC,gBAAgB,EAAE,CAAC;QACnBG,gBAAgB,EAAE,CAACI,KAAK,CAACJ,gBAAgB,GAAG,CAAC,IAAII,KAAK,CAACL,KAAK,CAACgB;MAC/D,CAAC;IACH,KAAK1B,UAAU;MACb,OAAOK,YAAY;IACrB;MACE,OAAOU,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}