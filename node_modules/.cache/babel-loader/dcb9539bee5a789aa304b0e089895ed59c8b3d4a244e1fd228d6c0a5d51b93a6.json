{"ast":null,"code":"import { FETCH_WORDS_REQUEST, FETCH_WORDS_SUCCESS, FETCH_WORDS_FAILURE, GUESS_LETTER, RESET_GAME, SET_NEXT_WORD } from './actions';\n\n// Initial state\nconst initialState = {\n  word: '',\n  // The current word to guess\n  guessedLetters: [],\n  // Array of guessed letters\n  incorrectGuesses: 0,\n  // Number of incorrect guesses\n  maxGuesses: 6,\n  // Maximum number of incorrect guesses allowed\n  loading: false,\n  // Loading state for fetching words\n  error: '',\n  // Error message for fetching words\n  words: [] // Array of words fetched from API\n};\n\n// Reducer function\nconst hangmanReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_WORDS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: ''\n      };\n    case FETCH_WORDS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        words: action.payload,\n        word: action.payload[0] || '' // Set the first word from the fetched list\n      };\n    case FETCH_WORDS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case GUESS_LETTER:\n      const letter = action.payload;\n      const updatedGuessedLetters = [...state.guessedLetters, letter];\n      const updatedIncorrectGuesses = state.word.includes(letter) ? state.incorrectGuesses : state.incorrectGuesses + 1;\n      return {\n        ...state,\n        guessedLetters: updatedGuessedLetters,\n        incorrectGuesses: updatedIncorrectGuesses\n      };\n    case RESET_GAME:\n      return {\n        ...state,\n        guessedLetters: [],\n        incorrectGuesses: 0,\n        word: state.words.length > 0 ? state.words[0] : '' // Reset to the first word\n      };\n    case SET_NEXT_WORD:\n      return {\n        ...state,\n        word: action.payload,\n        guessedLetters: [],\n        incorrectGuesses: 0\n      };\n    default:\n      return state;\n  }\n};\nexport default hangmanReducer;","map":{"version":3,"names":["FETCH_WORDS_REQUEST","FETCH_WORDS_SUCCESS","FETCH_WORDS_FAILURE","GUESS_LETTER","RESET_GAME","SET_NEXT_WORD","initialState","word","guessedLetters","incorrectGuesses","maxGuesses","loading","error","words","hangmanReducer","state","action","type","payload","letter","updatedGuessedLetters","updatedIncorrectGuesses","includes","length"],"sources":["C:/Users/hassa/Desktop/react/hangman-game/src/redux/reducers.js"],"sourcesContent":["import {\r\n    FETCH_WORDS_REQUEST,\r\n    FETCH_WORDS_SUCCESS,\r\n    FETCH_WORDS_FAILURE,\r\n    GUESS_LETTER,\r\n    RESET_GAME,\r\n    SET_NEXT_WORD,\r\n  } from './actions';\r\n  \r\n  // Initial state\r\n  const initialState = {\r\n    word: '', // The current word to guess\r\n    guessedLetters: [], // Array of guessed letters\r\n    incorrectGuesses: 0, // Number of incorrect guesses\r\n    maxGuesses: 6, // Maximum number of incorrect guesses allowed\r\n    loading: false, // Loading state for fetching words\r\n    error: '', // Error message for fetching words\r\n    words: [], // Array of words fetched from API\r\n  };\r\n  \r\n  // Reducer function\r\n  const hangmanReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case FETCH_WORDS_REQUEST:\r\n        return {\r\n          ...state,\r\n          loading: true,\r\n          error: '',\r\n        };\r\n  \r\n      case FETCH_WORDS_SUCCESS:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          words: action.payload,\r\n          word: action.payload[0] || '', // Set the first word from the fetched list\r\n        };\r\n  \r\n      case FETCH_WORDS_FAILURE:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          error: action.payload,\r\n        };\r\n  \r\n      case GUESS_LETTER:\r\n        const letter = action.payload;\r\n        const updatedGuessedLetters = [...state.guessedLetters, letter];\r\n        const updatedIncorrectGuesses =\r\n          state.word.includes(letter) ? state.incorrectGuesses : state.incorrectGuesses + 1;\r\n  \r\n        return {\r\n          ...state,\r\n          guessedLetters: updatedGuessedLetters,\r\n          incorrectGuesses: updatedIncorrectGuesses,\r\n        };\r\n  \r\n      case RESET_GAME:\r\n        return {\r\n          ...state,\r\n          guessedLetters: [],\r\n          incorrectGuesses: 0,\r\n          word: state.words.length > 0 ? state.words[0] : '', // Reset to the first word\r\n        };\r\n  \r\n      case SET_NEXT_WORD:\r\n        return {\r\n          ...state,\r\n          word: action.payload,\r\n          guessedLetters: [],\r\n          incorrectGuesses: 0,\r\n        };\r\n  \r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default hangmanReducer;\r\n  "],"mappings":"AAAA,SACIA,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,YAAY,EACZC,UAAU,EACVC,aAAa,QACR,WAAW;;AAElB;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,EAAE;EAAE;EACVC,cAAc,EAAE,EAAE;EAAE;EACpBC,gBAAgB,EAAE,CAAC;EAAE;EACrBC,UAAU,EAAE,CAAC;EAAE;EACfC,OAAO,EAAE,KAAK;EAAE;EAChBC,KAAK,EAAE,EAAE;EAAE;EACXC,KAAK,EAAE,EAAE,CAAE;AACb,CAAC;;AAED;AACA,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAGT,YAAY,EAAEU,MAAM,KAAK;EACvD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKjB,mBAAmB;MACtB,OAAO;QACL,GAAGe,KAAK;QACRJ,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKX,mBAAmB;MACtB,OAAO;QACL,GAAGc,KAAK;QACRJ,OAAO,EAAE,KAAK;QACdE,KAAK,EAAEG,MAAM,CAACE,OAAO;QACrBX,IAAI,EAAES,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAE;MACjC,CAAC;IAEH,KAAKhB,mBAAmB;MACtB,OAAO;QACL,GAAGa,KAAK;QACRJ,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEI,MAAM,CAACE;MAChB,CAAC;IAEH,KAAKf,YAAY;MACf,MAAMgB,MAAM,GAAGH,MAAM,CAACE,OAAO;MAC7B,MAAME,qBAAqB,GAAG,CAAC,GAAGL,KAAK,CAACP,cAAc,EAAEW,MAAM,CAAC;MAC/D,MAAME,uBAAuB,GAC3BN,KAAK,CAACR,IAAI,CAACe,QAAQ,CAACH,MAAM,CAAC,GAAGJ,KAAK,CAACN,gBAAgB,GAAGM,KAAK,CAACN,gBAAgB,GAAG,CAAC;MAEnF,OAAO;QACL,GAAGM,KAAK;QACRP,cAAc,EAAEY,qBAAqB;QACrCX,gBAAgB,EAAEY;MACpB,CAAC;IAEH,KAAKjB,UAAU;MACb,OAAO;QACL,GAAGW,KAAK;QACRP,cAAc,EAAE,EAAE;QAClBC,gBAAgB,EAAE,CAAC;QACnBF,IAAI,EAAEQ,KAAK,CAACF,KAAK,CAACU,MAAM,GAAG,CAAC,GAAGR,KAAK,CAACF,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAE;MACtD,CAAC;IAEH,KAAKR,aAAa;MAChB,OAAO;QACL,GAAGU,KAAK;QACRR,IAAI,EAAES,MAAM,CAACE,OAAO;QACpBV,cAAc,EAAE,EAAE;QAClBC,gBAAgB,EAAE;MACpB,CAAC;IAEH;MACE,OAAOM,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}